{
	"id": 0,
	"name": "slate",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 5,
			"name": "AddMarkCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `AddMarkCommand` adds a mark to the current selection."
			},
			"children": [
				{
					"id": 7,
					"name": "mark",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 147,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "Mark",
						"id": 473
					}
				},
				{
					"id": 6,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 146,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "add_mark"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						7,
						6
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 145,
					"character": 31
				}
			]
		},
		{
			"id": 1,
			"name": "Command",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Command` objects represent an action that a user is taking on the editor.\nThey capture the semantic \"intent\" of a user while they edit a document."
			},
			"indexSignature": [
				{
					"id": 3,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "`Command` objects represent an action that a user is taking on the editor.\nThey capture the semantic \"intent\" of a user while they edit a document."
					},
					"parameters": [
						{
							"id": 4,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"children": [
				{
					"id": 2,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 10,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 9,
					"character": 24
				}
			]
		},
		{
			"id": 8,
			"name": "DeleteBackwardCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `DeleteBackwardCommand` delete's content backward, meaning before the\ncurrent selection, by a specific `unit` of distance."
			},
			"children": [
				{
					"id": 9,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 156,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "delete_backward"
					}
				},
				{
					"id": 10,
					"name": "unit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 157,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "character"
							},
							{
								"type": "stringLiteral",
								"value": "word"
							},
							{
								"type": "stringLiteral",
								"value": "line"
							},
							{
								"type": "stringLiteral",
								"value": "block"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						9,
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 155,
					"character": 38
				}
			]
		},
		{
			"id": 11,
			"name": "DeleteForwardCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `DeleteBackwardCommand` delete's content forward, meaning after the\ncurrent selection, by a specific `unit` of distance."
			},
			"children": [
				{
					"id": 12,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 166,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "delete_forward"
					}
				},
				{
					"id": 13,
					"name": "unit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 167,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "character"
							},
							{
								"type": "stringLiteral",
								"value": "word"
							},
							{
								"type": "stringLiteral",
								"value": "line"
							},
							{
								"type": "stringLiteral",
								"value": "block"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						12,
						13
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 165,
					"character": 37
				}
			]
		},
		{
			"id": 14,
			"name": "DeleteFragmentCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `DeleteFragmentCommand` delete's the content of the current selection."
			},
			"children": [
				{
					"id": 15,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 175,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "delete_fragment"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						15
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 174,
					"character": 38
				}
			]
		},
		{
			"id": 415,
			"name": "Editor",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Editor` interface stores all the state of a Slate editor. It is extended\nby plugins that wish to add their own helpers and implement new behaviors."
			},
			"indexSignature": [
				{
					"id": 444,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "The `Editor` interface stores all the state of a Slate editor. It is extended\nby plugins that wish to add their own helpers and implement new behaviors."
					},
					"parameters": [
						{
							"id": 445,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"children": [
				{
					"id": 416,
					"name": "apply",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 20,
							"character": 7
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 417,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 418,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 419,
											"name": "operation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Operation"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/editor/index.ts",
									"line": 20,
									"character": 8
								}
							]
						}
					}
				},
				{
					"id": 420,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 21,
							"character": 10
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Node",
							"id": 496
						}
					}
				},
				{
					"id": 421,
					"name": "exec",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 22,
							"character": 6
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 422,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 423,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 424,
											"name": "command",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Command",
												"id": 1
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/editor/index.ts",
									"line": 22,
									"character": 7
								}
							]
						}
					}
				},
				{
					"id": 425,
					"name": "isInline",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 23,
							"character": 10
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 426,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 427,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 428,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 447
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/editor/index.ts",
									"line": 23,
									"character": 11
								}
							]
						}
					}
				},
				{
					"id": 429,
					"name": "isVoid",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 24,
							"character": 8
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 430,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 431,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 432,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 447
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/editor/index.ts",
									"line": 24,
									"character": 9
								}
							]
						}
					}
				},
				{
					"id": 433,
					"name": "normalizeNode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 25,
							"character": 15
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 434,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 435,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 436,
											"name": "entry",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NodeEntry",
												"id": 611
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/editor/index.ts",
									"line": 25,
									"character": 16
								}
							]
						}
					}
				},
				{
					"id": 437,
					"name": "onChange",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 26,
							"character": 10
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 438,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 439,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 440,
											"name": "children",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Node",
													"id": 496
												}
											}
										},
										{
											"id": 441,
											"name": "operations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Operation"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/editor/index.ts",
									"line": 26,
									"character": 11
								}
							]
						}
					}
				},
				{
					"id": 442,
					"name": "operations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 27,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Operation"
						}
					}
				},
				{
					"id": 443,
					"name": "selection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/editor/index.ts",
							"line": 28,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Range",
								"id": 760
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						416,
						420,
						421,
						425,
						429,
						433,
						437,
						442,
						443
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/index.ts",
					"line": 19,
					"character": 23
				}
			]
		},
		{
			"id": 447,
			"name": "Element",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Element` objects are a type of node in a Slate document that contain other\nelement nodes or text nodes. They can be either \"blocks\" or \"inlines\"\ndepending on the Slate editor's schema."
			},
			"indexSignature": [
				{
					"id": 449,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "`Element` objects are a type of node in a Slate document that contain other\nelement nodes or text nodes. They can be either \"blocks\" or \"inlines\"\ndepending on the Slate editor's schema."
					},
					"parameters": [
						{
							"id": 450,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"children": [
				{
					"id": 448,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/element.ts",
							"line": 11,
							"character": 10
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Node",
							"id": 496
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						448
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/element.ts",
					"line": 10,
					"character": 24
				}
			]
		},
		{
			"id": 16,
			"name": "InsertBreakCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `InsertBreakCommand` breaks a block in two at the current selection."
			},
			"children": [
				{
					"id": 17,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 183,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "insert_break"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						17
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 182,
					"character": 35
				}
			]
		},
		{
			"id": 18,
			"name": "InsertFragmentCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `InsertFragmentCommand` inserts a list of nodes at the current selection."
			},
			"children": [
				{
					"id": 20,
					"name": "fragment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 192,
							"character": 10
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Node",
							"id": 496
						}
					}
				},
				{
					"id": 19,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 191,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "insert_fragment"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						20,
						19
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 190,
					"character": 38
				}
			]
		},
		{
			"id": 21,
			"name": "InsertNodeCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `InsertNodeCommand` inserts a node at the current selection."
			},
			"children": [
				{
					"id": 23,
					"name": "node",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 201,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 496
					}
				},
				{
					"id": 22,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 200,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "insert_node"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						23,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 199,
					"character": 34
				}
			]
		},
		{
			"id": 24,
			"name": "InsertTextCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `InsertTextCommand` inserts a string of text at the current selection."
			},
			"children": [
				{
					"id": 26,
					"name": "text",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 210,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 25,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 209,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "insert_text"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						26,
						25
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 208,
					"character": 34
				}
			]
		},
		{
			"id": 473,
			"name": "Mark",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Mark` objects represent formatting that is applied to text in a Slate\ndocument. They appear in leaf text nodes in the document."
			},
			"indexSignature": [
				{
					"id": 474,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "`Mark` objects represent formatting that is applied to text in a Slate\ndocument. They appear in leaf text nodes in the document."
					},
					"parameters": [
						{
							"id": 475,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "interfaces/mark.ts",
					"line": 9,
					"character": 21
				}
			]
		},
		{
			"id": 708,
			"name": "PathRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`PathRef` objects keep a specific path in a document synced over time as new\noperations are applied to the editor. You can access their `current` property\nat any time for the up-to-date path value."
			},
			"children": [
				{
					"id": 710,
					"name": "affinity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/path-ref.ts",
							"line": 11,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "forward"
							},
							{
								"type": "stringLiteral",
								"value": "backward"
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 709,
					"name": "current",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/path-ref.ts",
							"line": 10,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Path",
								"id": 618
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 711,
					"name": "unref",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 712,
							"name": "unref",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Path",
										"id": 618
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path-ref.ts",
							"line": 12,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						710,
						709
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						711
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/path-ref.ts",
					"line": 9,
					"character": 24
				}
			]
		},
		{
			"id": 718,
			"name": "Point",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Point` objects refer to a specific location in a text node in a Slate\ndocument. Its path refers to the location of the node in the tree, and its\noffset refers to the distance into the node's string of text. Points can\nonly refer to `Text` nodes."
			},
			"indexSignature": [
				{
					"id": 721,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "`Point` objects refer to a specific location in a text node in a Slate\ndocument. Its path refers to the location of the node in the tree, and its\noffset refers to the distance into the node's string of text. Points can\nonly refer to `Text` nodes."
					},
					"parameters": [
						{
							"id": 722,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"children": [
				{
					"id": 720,
					"name": "offset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 14,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 719,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 13,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						720,
						719
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/point.ts",
					"line": 12,
					"character": 22
				}
			]
		},
		{
			"id": 750,
			"name": "PointRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`PointRef` objects keep a specific point in a document synced over time as new\noperations are applied to the editor. You can access their `current` property\nat any time for the up-to-date point value."
			},
			"children": [
				{
					"id": 752,
					"name": "affinity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/point-ref.ts",
							"line": 11,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "forward"
							},
							{
								"type": "stringLiteral",
								"value": "backward"
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 751,
					"name": "current",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/point-ref.ts",
							"line": 10,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Point",
								"id": 718
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 753,
					"name": "unref",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 754,
							"name": "unref",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point-ref.ts",
							"line": 12,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						752,
						751
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						753
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/point-ref.ts",
					"line": 9,
					"character": 25
				}
			]
		},
		{
			"id": 760,
			"name": "Range",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Range` objects are a set of points that refer to a specific span of a Slate\ndocument. They can define a span inside a single node or a can span across\nmultiple nodes."
			},
			"indexSignature": [
				{
					"id": 763,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "`Range` objects are a set of points that refer to a specific span of a Slate\ndocument. They can define a span inside a single node or a can span across\nmultiple nodes."
					},
					"parameters": [
						{
							"id": 764,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"children": [
				{
					"id": 761,
					"name": "anchor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 12,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Point",
						"id": 718
					}
				},
				{
					"id": 762,
					"name": "focus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 13,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "Point",
						"id": 718
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						761,
						762
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/range.ts",
					"line": 11,
					"character": 22
				}
			]
		},
		{
			"id": 823,
			"name": "RangeRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`RangeRef` objects keep a specific range in a document synced over time as new\noperations are applied to the editor. You can access their `current` property\nat any time for the up-to-date range value."
			},
			"children": [
				{
					"id": 825,
					"name": "affinity",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/range-ref.ts",
							"line": 11,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "forward"
							},
							{
								"type": "stringLiteral",
								"value": "backward"
							},
							{
								"type": "stringLiteral",
								"value": "outward"
							},
							{
								"type": "stringLiteral",
								"value": "inward"
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 824,
					"name": "current",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/range-ref.ts",
							"line": 10,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Range",
								"id": 760
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 826,
					"name": "unref",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 827,
							"name": "unref",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Range",
										"id": 760
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range-ref.ts",
							"line": 12,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						825,
						824
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						826
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/range-ref.ts",
					"line": 9,
					"character": 25
				}
			]
		},
		{
			"id": 27,
			"name": "RemoveMarkCommand",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `RemoveMarkCommand` removes a mark in the current selection."
			},
			"children": [
				{
					"id": 29,
					"name": "mark",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 219,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "Mark",
						"id": 473
					}
				},
				{
					"id": 28,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 218,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "remove_mark"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						29,
						28
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 217,
					"character": 34
				}
			]
		},
		{
			"id": 833,
			"name": "Text",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Text` objects represent the nodes that contain the actual text content of a\nSlate document along with any formatting marks. They are always leaf nodes in\nthe document tree as they cannot contain any children."
			},
			"indexSignature": [
				{
					"id": 836,
					"name": "__index",
					"kind": 8192,
					"kindString": "Index signature",
					"flags": {},
					"comment": {
						"shortText": "`Text` objects represent the nodes that contain the actual text content of a\nSlate document along with any formatting marks. They are always leaf nodes in\nthe document tree as they cannot contain any children."
					},
					"parameters": [
						{
							"id": 837,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"children": [
				{
					"id": 835,
					"name": "marks",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/text.ts",
							"line": 12,
							"character": 7
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Mark",
							"id": 473
						}
					}
				},
				{
					"id": 834,
					"name": "text",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "interfaces/text.ts",
							"line": 11,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						835,
						834
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/text.ts",
					"line": 10,
					"character": 21
				}
			]
		},
		{
			"id": 610,
			"name": "Ancestor",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Ancestor` union type represents nodes that are ancestors in the tree.\nIt is returned as a convenience in certain cases to narrow a value further\nthan the more generic `Node` union."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 544,
					"character": 20
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "reference",
						"name": "Element",
						"id": 447
					}
				]
			}
		},
		{
			"id": 613,
			"name": "AncestorEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`AncestorEntry` objects are returned when iterating over the ancestors in a\nSlate document tree."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 566,
					"character": 25
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Ancestor",
						"id": 610
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 64,
			"name": "CoreCommand",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `CoreCommand` union is a set of all of the commands that are recognized\nby Slate's \"core\" out of the box."
			},
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 227,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "AddMarkCommand",
						"id": 5
					},
					{
						"type": "reference",
						"name": "DeleteBackwardCommand",
						"id": 8
					},
					{
						"type": "reference",
						"name": "DeleteForwardCommand",
						"id": 11
					},
					{
						"type": "reference",
						"name": "DeleteFragmentCommand",
						"id": 14
					},
					{
						"type": "reference",
						"name": "InsertBreakCommand",
						"id": 16
					},
					{
						"type": "reference",
						"name": "InsertFragmentCommand",
						"id": 18
					},
					{
						"type": "reference",
						"name": "InsertNodeCommand",
						"id": 21
					},
					{
						"type": "reference",
						"name": "InsertTextCommand",
						"id": 24
					},
					{
						"type": "reference",
						"name": "RemoveMarkCommand",
						"id": 27
					}
				]
			}
		},
		{
			"id": 609,
			"name": "Descendant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Descendant` union type represents nodes that are descendants in the\ntree. It is returned as a convenience in certain cases to narrow a value\nfurther than the more generic `Node` union."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 536,
					"character": 22
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Element",
						"id": 447
					},
					{
						"type": "reference",
						"name": "Text",
						"id": 833
					}
				]
			}
		},
		{
			"id": 612,
			"name": "DescendantEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`DescendantEntry` objects are returned when iterating over the descendants in\na Slate document tree."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 559,
					"character": 27
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Descendant",
						"id": 609
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 462,
			"name": "ElementEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`ElementEntry` objects refer to an `Element` and the `Path` where it can be\nfound inside a root node."
			},
			"sources": [
				{
					"fileName": "interfaces/element.ts",
					"line": 66,
					"character": 24
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Element",
						"id": 447
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 463,
			"name": "Location",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Location` interface is a union of the ways to refer to a specific\nlocation in a Slate document: paths, points or ranges.",
				"text": "Methods will often accept a `Location` instead of requiring only a `Path`,\n`Point` or `Range`. This eliminates the need for developers to manage\nconverting between the different interfaces in their own code base.\n"
			},
			"sources": [
				{
					"fileName": "interfaces/location.ts",
					"line": 12,
					"character": 20
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					},
					{
						"type": "reference",
						"name": "Point",
						"id": 718
					},
					{
						"type": "reference",
						"name": "Range",
						"id": 760
					}
				]
			}
		},
		{
			"id": 491,
			"name": "MarkEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`MarkEntry` tuples are returned when iterating through the marks in a text\nnode. They include the index of the mark in the text node's marks array, as\nwell as the text node and its path in the root node."
			},
			"sources": [
				{
					"fileName": "interfaces/mark.ts",
					"line": 59,
					"character": 21
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Mark",
						"id": 473
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "reference",
						"name": "Text",
						"id": 833
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 492,
			"name": "MarkMatch",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`MarkMatch` values are used as shorthands for matching mark objects."
			},
			"sources": [
				{
					"fileName": "interfaces/mark.ts",
					"line": 65,
					"character": 21
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Mark",
								"id": 473
							}
						]
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 493,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 494,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 495,
											"name": "entry",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MarkEntry",
												"id": 491
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/mark.ts",
									"line": 65,
									"character": 39
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 496,
			"name": "Node",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Node` union type represents all of the different types of nodes that\noccur in a Slate document tree."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 18,
					"character": 16
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "reference",
						"name": "Element",
						"id": 447
					},
					{
						"type": "reference",
						"name": "Text",
						"id": 833
					}
				]
			}
		},
		{
			"id": 611,
			"name": "NodeEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`NodeEntry` objects are returned when iterating over the nodes in a Slate\ndocument tree. They consist of the node and its `Path` relative to the root\nnode in the document."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 552,
					"character": 21
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Node",
						"id": 496
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 614,
			"name": "NodeMatch",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`NodeMatch` values are used as shorthands for matching a node by either its\nkind, its location, its behavior or its properties."
			},
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 573,
					"character": 21
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "block"
					},
					{
						"type": "stringLiteral",
						"value": "element"
					},
					{
						"type": "stringLiteral",
						"value": "inline"
					},
					{
						"type": "stringLiteral",
						"value": "inline-element"
					},
					{
						"type": "stringLiteral",
						"value": "text"
					},
					{
						"type": "stringLiteral",
						"value": "editor"
					},
					{
						"type": "stringLiteral",
						"value": "void"
					},
					{
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Node",
								"id": 496
							}
						]
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 615,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 616,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 617,
											"name": "entry",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NodeEntry",
												"id": 611
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "interfaces/node.ts",
									"line": 582,
									"character": 3
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 618,
			"name": "Path",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`Path` arrays are a list of indexes that describe a node's exact position in\na Slate node tree. Although they are usually relative to the root `Editor`\nobject, they can be relative to any `Node` object."
			},
			"sources": [
				{
					"fileName": "interfaces/path.ts",
					"line": 10,
					"character": 16
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "number"
				}
			}
		},
		{
			"id": 749,
			"name": "PointEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`PointEntry` objects are returned when iterating over `Point` objects that\nbelong to a range."
			},
			"sources": [
				{
					"fileName": "interfaces/point.ts",
					"line": 160,
					"character": 22
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Point",
						"id": 718
					},
					{
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "anchor"
							},
							{
								"type": "stringLiteral",
								"value": "focus"
							}
						]
					}
				]
			}
		},
		{
			"id": 468,
			"name": "Span",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Span` interface is a low-level way to refer to locations in nodes\nwithout using `Point` which requires leaf text nodes to be present."
			},
			"sources": [
				{
					"fileName": "interfaces/location.ts",
					"line": 29,
					"character": 16
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 849,
			"name": "TextEntry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "`TextEntry` objects refer to an `Text` and the `Path` where it can be\nfound inside a root node."
			},
			"sources": [
				{
					"fileName": "interfaces/text.ts",
					"line": 89,
					"character": 21
				}
			],
			"type": {
				"type": "tuple",
				"elements": [
					{
						"type": "reference",
						"name": "Text",
						"id": 833
					},
					{
						"type": "reference",
						"name": "Path",
						"id": 618
					}
				]
			}
		},
		{
			"id": 82,
			"name": "DIRTY_PATHS",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "interfaces/editor/transforms/general.ts",
					"line": 15,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"name": "WeakMap",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "Path",
							"id": 618
						}
					}
				]
			},
			"defaultValue": " new WeakMap()"
		},
		{
			"id": 93,
			"name": "NORMALIZING",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "interfaces/editor/queries/general.ts",
					"line": 14,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"name": "WeakMap",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					}
				]
			},
			"defaultValue": " new WeakMap()"
		},
		{
			"id": 94,
			"name": "PATH_REFS",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "interfaces/editor/queries/general.ts",
					"line": 15,
					"character": 22
				}
			],
			"type": {
				"type": "reference",
				"name": "WeakMap",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "reference",
						"name": "Set",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PathRef",
								"id": 708
							}
						]
					}
				]
			},
			"defaultValue": " new WeakMap()"
		},
		{
			"id": 95,
			"name": "POINT_REFS",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "interfaces/editor/queries/general.ts",
					"line": 16,
					"character": 23
				}
			],
			"type": {
				"type": "reference",
				"name": "WeakMap",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "reference",
						"name": "Set",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PointRef",
								"id": 750
							}
						]
					}
				]
			},
			"defaultValue": " new WeakMap()"
		},
		{
			"id": 96,
			"name": "RANGE_REFS",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "interfaces/editor/queries/general.ts",
					"line": 17,
					"character": 23
				}
			],
			"type": {
				"type": "reference",
				"name": "WeakMap",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Editor",
						"id": 415
					},
					{
						"type": "reference",
						"name": "Set",
						"typeArguments": [
							{
								"type": "reference",
								"name": "RangeRef",
								"id": 823
							}
						]
					}
				]
			},
			"defaultValue": " new WeakMap()"
		},
		{
			"id": 850,
			"name": "createEditor",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Create a new Slate `Editor` object."
			},
			"signatures": [
				{
					"id": 851,
					"name": "createEditor",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Create a new Slate `Editor` object."
					},
					"type": {
						"type": "reference",
						"name": "Editor",
						"id": 415
					}
				}
			],
			"sources": [
				{
					"fileName": "create-editor.ts",
					"line": 24,
					"character": 25
				}
			]
		},
		{
			"id": 30,
			"name": "Command",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 34,
					"name": "isAddMarkCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "isAddMarkCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an `AddMarkCommand` object."
							},
							"parameters": [
								{
									"id": 36,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "AddMarkCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 27,
							"character": 18
						}
					]
				},
				{
					"id": 31,
					"name": "isCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 32,
							"name": "isCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `Command` object."
							},
							"parameters": [
								{
									"id": 33,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Command"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 19,
							"character": 11
						}
					]
				},
				{
					"id": 37,
					"name": "isCoreCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 38,
							"name": "isCoreCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `CoreCommand` object."
							},
							"parameters": [
								{
									"id": 39,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "CoreCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 39,
							"character": 15
						}
					]
				},
				{
					"id": 40,
					"name": "isDeleteBackwardCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 41,
							"name": "isDeleteBackwardCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `DeleteBackwardCommand` object."
							},
							"parameters": [
								{
									"id": 42,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "DeleteBackwardCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 56,
							"character": 25
						}
					]
				},
				{
					"id": 43,
					"name": "isDeleteForwardCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 44,
							"name": "isDeleteForwardCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `DeleteForwardCommand` object."
							},
							"parameters": [
								{
									"id": 45,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "DeleteForwardCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 68,
							"character": 24
						}
					]
				},
				{
					"id": 46,
					"name": "isDeleteFragmentCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "isDeleteFragmentCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `DeleteFragmentCommand` object."
							},
							"parameters": [
								{
									"id": 48,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "DeleteFragmentCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 80,
							"character": 25
						}
					]
				},
				{
					"id": 49,
					"name": "isInsertBreakCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 50,
							"name": "isInsertBreakCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an `InsertBreakCommand` object."
							},
							"parameters": [
								{
									"id": 51,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "InsertBreakCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 88,
							"character": 22
						}
					]
				},
				{
					"id": 52,
					"name": "isInsertFragmentCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 53,
							"name": "isInsertFragmentCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an `InsertFragmentCommand` object."
							},
							"parameters": [
								{
									"id": 54,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "InsertFragmentCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 96,
							"character": 25
						}
					]
				},
				{
					"id": 55,
					"name": "isInsertNodeCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 56,
							"name": "isInsertNodeCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an `InsertNodeCommand` object."
							},
							"parameters": [
								{
									"id": 57,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "InsertNodeCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 108,
							"character": 21
						}
					]
				},
				{
					"id": 58,
					"name": "isInsertTextCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 59,
							"name": "isInsertTextCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `InsertTextCommand` object."
							},
							"parameters": [
								{
									"id": 60,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "InsertTextCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 120,
							"character": 21
						}
					]
				},
				{
					"id": 61,
					"name": "isRemoveMarkCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 62,
							"name": "isRemoveMarkCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a `RemoveMarkCommand` object."
							},
							"parameters": [
								{
									"id": 63,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "RemoveMarkCommand"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/command.ts",
							"line": 132,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						34,
						31,
						37,
						40,
						43,
						46,
						49,
						52,
						55,
						58,
						61
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/command.ts",
					"line": 14,
					"character": 20
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 446,
			"name": "Editor",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "interfaces/editor/index.ts",
					"line": 32,
					"character": 19
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 451,
			"name": "Element",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 452,
					"name": "isElement",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 453,
							"name": "isElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Element` interface."
							},
							"parameters": [
								{
									"id": 454,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Element"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/element.ts",
							"line": 20,
							"character": 11
						}
					]
				},
				{
					"id": 455,
					"name": "isElementList",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 456,
							"name": "isElementList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an array of `Element` objects."
							},
							"parameters": [
								{
									"id": 457,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "Element"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/element.ts",
							"line": 32,
							"character": 15
						}
					]
				},
				{
					"id": 458,
					"name": "matches",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 459,
							"name": "matches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if an element matches set of properties.",
								"text": "Note: this checks custom properties, and it does not ensure that any\nchildren are equivalent.\n"
							},
							"parameters": [
								{
									"id": 460,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 447
									}
								},
								{
									"id": 461,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 447
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/element.ts",
							"line": 46,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						452,
						455,
						458
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/element.ts",
					"line": 15,
					"character": 20
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 65,
			"name": "ElementQueries",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 66,
					"name": "hasBlocks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 67,
							"name": "hasBlocks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a node has block children."
							},
							"parameters": [
								{
									"id": 68,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 69,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 447
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/element.ts",
							"line": 8,
							"character": 11
						}
					]
				},
				{
					"id": 70,
					"name": "hasInlines",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 71,
							"name": "hasInlines",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a node has inline and text children."
							},
							"parameters": [
								{
									"id": 72,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 73,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 447
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/element.ts",
							"line": 18,
							"character": 12
						}
					]
				},
				{
					"id": 74,
					"name": "hasTexts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 75,
							"name": "hasTexts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a node has text children."
							},
							"parameters": [
								{
									"id": 76,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 77,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 447
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/element.ts",
							"line": 28,
							"character": 10
						}
					]
				},
				{
					"id": 78,
					"name": "isEmpty",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 79,
							"name": "isEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if an element is empty, accounting for void nodes."
							},
							"parameters": [
								{
									"id": 80,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 81,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 447
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/element.ts",
							"line": 36,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						66,
						70,
						74,
						78
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/queries/element.ts",
					"line": 3,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 97,
			"name": "GeneralQueries",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 98,
					"name": "isEditor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 99,
							"name": "isEditor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an `Editor` object."
							},
							"parameters": [
								{
									"id": 100,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Editor"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 24,
							"character": 10
						}
					]
				},
				{
					"id": 101,
					"name": "isNormalizing",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 102,
							"name": "isNormalizing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if the editor is currently normalizing after each operation."
							},
							"parameters": [
								{
									"id": 103,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 43,
							"character": 15
						}
					]
				},
				{
					"id": 104,
					"name": "pathRef",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 105,
							"name": "pathRef",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a mutable ref for a `Path` object, which will stay in sync as new\noperations are applied to the editor."
							},
							"parameters": [
								{
									"id": 106,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 107,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 108,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 109,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/general.ts",
													"line": 56,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "PathRef",
								"id": 708
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 53,
							"character": 9
						}
					]
				},
				{
					"id": 110,
					"name": "pathRefs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 111,
							"name": "pathRefs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the set of currently tracked path refs of the editor."
							},
							"parameters": [
								{
									"id": 112,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"typeArguments": [
									{
										"type": "reference",
										"name": "PathRef",
										"id": 708
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 82,
							"character": 10
						}
					]
				},
				{
					"id": 113,
					"name": "pointRef",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 114,
							"name": "pointRef",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a mutable ref for a `Point` object, which will stay in sync as new\noperations are applied to the editor."
							},
							"parameters": [
								{
									"id": 115,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 116,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 117,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 118,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/general.ts",
													"line": 101,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "PointRef",
								"id": 750
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 98,
							"character": 10
						}
					]
				},
				{
					"id": 119,
					"name": "pointRefs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 120,
							"name": "pointRefs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the set of currently tracked point refs of the editor."
							},
							"parameters": [
								{
									"id": 121,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"typeArguments": [
									{
										"type": "reference",
										"name": "PointRef",
										"id": 750
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 127,
							"character": 11
						}
					]
				},
				{
					"id": 122,
					"name": "rangeRef",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 123,
							"name": "rangeRef",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a mutable ref for a `Range` object, which will stay in sync as new\noperations are applied to the editor."
							},
							"parameters": [
								{
									"id": 124,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 125,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 126,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 127,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/general.ts",
													"line": 146,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "RangeRef",
								"id": 823
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 143,
							"character": 10
						}
					]
				},
				{
					"id": 128,
					"name": "rangeRefs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 129,
							"name": "rangeRefs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the set of currently tracked range refs of the editor."
							},
							"parameters": [
								{
									"id": 130,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Set",
								"typeArguments": [
									{
										"type": "reference",
										"name": "RangeRef",
										"id": 823
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 172,
							"character": 11
						}
					]
				},
				{
					"id": 131,
					"name": "withoutNormalizing",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 132,
							"name": "withoutNormalizing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Call a function, deferring normalization until after it completes."
							},
							"parameters": [
								{
									"id": 133,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 134,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 135,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 136,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/editor/queries/general.ts",
													"line": 187,
													"character": 40
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/general.ts",
							"line": 187,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						98,
						101,
						104,
						110,
						113,
						119,
						122,
						128,
						131
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/queries/general.ts",
					"line": 19,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 83,
			"name": "GeneralTransforms",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 84,
					"name": "normalize",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 85,
							"name": "normalize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Normalize any dirty objects in the editor."
							},
							"parameters": [
								{
									"id": 86,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 87,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 88,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/general.ts",
													"line": 24,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/general.ts",
							"line": 22,
							"character": 11
						}
					]
				},
				{
					"id": 89,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 90,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform the editor by an operation."
							},
							"parameters": [
								{
									"id": 91,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 92,
									"name": "op",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/general.ts",
							"line": 66,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						84,
						89
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/transforms/general.ts",
					"line": 17,
					"character": 30
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 464,
			"name": "Location",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 465,
					"name": "isLocation",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 466,
							"name": "isLocation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Location` interface."
							},
							"parameters": [
								{
									"id": 467,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Location"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/location.ts",
							"line": 19,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						465
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/location.ts",
					"line": 14,
					"character": 21
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 137,
			"name": "LocationQueries",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 138,
					"name": "activeMarks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 139,
							"name": "activeMarks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the marks that are \"active\" at a location. These are the\nmarks that will be added to any text that is inserted.",
								"text": "The `union: true` option can be passed to create a union of marks across\nthe text nodes in the selection, instead of creating an intersection, which\nis the default.\n\nNote: to obey common rich text behavior, if the selection is collapsed at\nthe start of a text node and there are previous text nodes in the same\nblock, it will carry those marks forward from the previous text node. This\nallows for continuation of marks from previous words.\n"
							},
							"parameters": [
								{
									"id": 140,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 141,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 142,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 41,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Mark",
									"id": 473
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 39,
							"character": 13
						}
					]
				},
				{
					"id": 143,
					"name": "after",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 144,
							"name": "after",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the point after a location."
							},
							"parameters": [
								{
									"id": 145,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 146,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 147,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 148,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 119,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 116,
							"character": 7
						}
					]
				},
				{
					"id": 149,
					"name": "ancestor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 150,
							"name": "ancestor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the common ancestor node of a location."
							},
							"parameters": [
								{
									"id": 151,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 152,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 153,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 154,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 153,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "AncestorEntry",
								"id": 613
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 150,
							"character": 10
						}
					]
				},
				{
					"id": 155,
					"name": "before",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 156,
							"name": "before",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the point before a location."
							},
							"parameters": [
								{
									"id": 157,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 158,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 159,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 160,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 178,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 175,
							"character": 8
						}
					]
				},
				{
					"id": 161,
					"name": "edges",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 162,
							"name": "edges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start and end points of a location."
							},
							"parameters": [
								{
									"id": 163,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 164,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									},
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 213,
							"character": 7
						}
					]
				},
				{
					"id": 165,
					"name": "elements",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 166,
							"name": "elements",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the elements in the Editor."
							},
							"parameters": [
								{
									"id": 167,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 168,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 169,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 223,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ElementEntry",
										"id": 462
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 221,
							"character": 11
						}
					]
				},
				{
					"id": 170,
					"name": "end",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 171,
							"name": "end",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the end point of a location."
							},
							"parameters": [
								{
									"id": 172,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 173,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 248,
							"character": 5
						}
					]
				},
				{
					"id": 174,
					"name": "first",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 175,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the first node at a location."
							},
							"parameters": [
								{
									"id": 176,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 177,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeEntry",
								"id": 611
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 256,
							"character": 7
						}
					]
				},
				{
					"id": 178,
					"name": "fragment",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 179,
							"name": "fragment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the fragment at a location."
							},
							"parameters": [
								{
									"id": 180,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 181,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Descendant",
									"id": 609
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 265,
							"character": 10
						}
					]
				},
				{
					"id": 192,
					"name": "isEdge",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 193,
							"name": "isEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a point is an edge of a location."
							},
							"parameters": [
								{
									"id": 194,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 195,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 196,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 298,
							"character": 8
						}
					]
				},
				{
					"id": 187,
					"name": "isEnd",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 188,
							"name": "isEnd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a point is the end point of a location."
							},
							"parameters": [
								{
									"id": 189,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 190,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 191,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 289,
							"character": 7
						}
					]
				},
				{
					"id": 182,
					"name": "isStart",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 183,
							"name": "isStart",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a point the start point of a location."
							},
							"parameters": [
								{
									"id": 184,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 185,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 186,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 275,
							"character": 9
						}
					]
				},
				{
					"id": 197,
					"name": "last",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 198,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the last node at a location."
							},
							"parameters": [
								{
									"id": 199,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 200,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeEntry",
								"id": 611
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 306,
							"character": 6
						}
					]
				},
				{
					"id": 201,
					"name": "leaf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 202,
							"name": "leaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the leaf text node at a location."
							},
							"parameters": [
								{
									"id": 203,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 204,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 205,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 206,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 318,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "TextEntry",
								"id": 849
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 315,
							"character": 6
						}
					]
				},
				{
					"id": 207,
					"name": "levels",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 208,
							"name": "levels",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the levels at a location."
							},
							"parameters": [
								{
									"id": 209,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 210,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 211,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 334,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 332,
							"character": 9
						}
					]
				},
				{
					"id": 212,
					"name": "marks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 213,
							"name": "marks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the text nodes in the Editor."
							},
							"parameters": [
								{
									"id": 214,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 215,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 216,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 369,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MarkEntry",
										"id": 491
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 367,
							"character": 8
						}
					]
				},
				{
					"id": 217,
					"name": "match",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 218,
							"name": "match",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the first matching node in a single branch of the document."
							},
							"parameters": [
								{
									"id": 219,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 220,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 221,
									"name": "match",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NodeMatch",
										"id": 614
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 394,
							"character": 7
						}
					]
				},
				{
					"id": 222,
					"name": "matches",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 223,
							"name": "matches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the nodes that match."
							},
							"parameters": [
								{
									"id": 224,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 225,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 226,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 410,
													"character": 12
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 408,
							"character": 10
						}
					]
				},
				{
					"id": 227,
					"name": "next",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 228,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the matching node in the branch of the document after a location."
							},
							"parameters": [
								{
									"id": 229,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 230,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 231,
									"name": "match",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NodeMatch",
										"id": 614
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 450,
							"character": 6
						}
					]
				},
				{
					"id": 232,
					"name": "node",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 233,
							"name": "node",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the node at a location."
							},
							"parameters": [
								{
									"id": 234,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 235,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 236,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 237,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 472,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeEntry",
								"id": 611
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 469,
							"character": 6
						}
					]
				},
				{
					"id": 238,
					"name": "nodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 239,
							"name": "nodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the nodes in the Editor."
							},
							"parameters": [
								{
									"id": 240,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 241,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 242,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 488,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 486,
							"character": 8
						}
					]
				},
				{
					"id": 243,
					"name": "parent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 244,
							"name": "parent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the parent node of a location."
							},
							"parameters": [
								{
									"id": 245,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 246,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 247,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 248,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 519,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "AncestorEntry",
								"id": 613
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 516,
							"character": 8
						}
					]
				},
				{
					"id": 249,
					"name": "path",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 250,
							"name": "path",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the path of a location."
							},
							"parameters": [
								{
									"id": 251,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 252,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 253,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 254,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 537,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 618
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 534,
							"character": 6
						}
					]
				},
				{
					"id": 255,
					"name": "point",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 256,
							"name": "point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start or end point of a location."
							},
							"parameters": [
								{
									"id": 257,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 258,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 259,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 260,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 582,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Point",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 579,
							"character": 7
						}
					]
				},
				{
					"id": 261,
					"name": "positions",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 262,
							"name": "positions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the positions in the document where a `Point` can be\nplaced.",
								"text": "By default it will move forward by individual offsets at a time,  but you\ncan pass the `unit: 'character'` option to moved forward one character, word,\nor line at at time.\n\nNote: void nodes are treated as a single point, and iteration will not\nhappen inside their content.\n"
							},
							"parameters": [
								{
									"id": 263,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 264,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 265,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 632,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 630,
							"character": 12
						}
					]
				},
				{
					"id": 266,
					"name": "previous",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 267,
							"name": "previous",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the matching node in the branch of the document before a location."
							},
							"parameters": [
								{
									"id": 268,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 269,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 270,
									"name": "match",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NodeMatch",
										"id": 614
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 744,
							"character": 10
						}
					]
				},
				{
					"id": 271,
					"name": "range",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 272,
							"name": "range",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a range of a location."
							},
							"parameters": [
								{
									"id": 273,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 274,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								},
								{
									"id": 275,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Range",
								"id": 760
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 771,
							"character": 7
						}
					]
				},
				{
					"id": 276,
					"name": "start",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 277,
							"name": "start",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start point of a location."
							},
							"parameters": [
								{
									"id": 278,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 279,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 785,
							"character": 7
						}
					]
				},
				{
					"id": 280,
					"name": "text",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 281,
							"name": "text",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the text content of a location.",
								"text": "Note: the text of void nodes is presumed to be an empty string, regardless\nof what their actual content is.\n"
							},
							"parameters": [
								{
									"id": 282,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 283,
									"name": "at",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 796,
							"character": 6
						}
					]
				},
				{
					"id": 284,
					"name": "texts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 285,
							"name": "texts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the text nodes in the Editor."
							},
							"parameters": [
								{
									"id": 286,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 287,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 288,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/queries/location.ts",
													"line": 824,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TextEntry",
										"id": 849
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/location.ts",
							"line": 822,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						138,
						143,
						149,
						155,
						161,
						165,
						170,
						174,
						178,
						192,
						187,
						182,
						197,
						201,
						207,
						212,
						217,
						222,
						227,
						232,
						238,
						243,
						249,
						255,
						261,
						266,
						271,
						276,
						280,
						284
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/queries/location.ts",
					"line": 24,
					"character": 28
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 476,
			"name": "Mark",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 477,
					"name": "exists",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 478,
							"name": "exists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a mark exists in a set of marks."
							},
							"parameters": [
								{
									"id": 479,
									"name": "mark",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Mark",
										"id": 473
									}
								},
								{
									"id": 480,
									"name": "marks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Mark",
											"id": 473
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/mark.ts",
							"line": 18,
							"character": 8
						}
					]
				},
				{
					"id": 481,
					"name": "isMark",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 482,
							"name": "isMark",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Mark` interface."
							},
							"parameters": [
								{
									"id": 483,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Mark"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/mark.ts",
							"line": 26,
							"character": 8
						}
					]
				},
				{
					"id": 484,
					"name": "isMarkSet",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 485,
							"name": "isMarkSet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an array of `Mark` objects."
							},
							"parameters": [
								{
									"id": 486,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "Mark"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/mark.ts",
							"line": 34,
							"character": 11
						}
					]
				},
				{
					"id": 487,
					"name": "matches",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 488,
							"name": "matches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a mark matches set of properties."
							},
							"parameters": [
								{
									"id": 489,
									"name": "mark",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Mark",
										"id": 473
									}
								},
								{
									"id": 490,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Mark",
												"id": 473
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/mark.ts",
							"line": 42,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						477,
						481,
						484,
						487
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/mark.ts",
					"line": 13,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 289,
			"name": "MarkTransforms",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 290,
					"name": "addMarks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 291,
							"name": "addMarks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a set of marks to the text nodes at a location."
							},
							"parameters": [
								{
									"id": 292,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 293,
									"name": "marks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Mark",
											"id": 473
										}
									}
								},
								{
									"id": 294,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 295,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/mark.ts",
													"line": 11,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/mark.ts",
							"line": 8,
							"character": 10
						}
					]
				},
				{
					"id": 296,
					"name": "removeMarks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 297,
							"name": "removeMarks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 298,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 299,
									"name": "marks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Mark",
											"id": 473
										}
									}
								},
								{
									"id": 300,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 301,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/mark.ts",
													"line": 45,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/mark.ts",
							"line": 42,
							"character": 13
						}
					]
				},
				{
					"id": 302,
					"name": "setMarks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 303,
							"name": "setMarks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 304,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 305,
									"name": "marks",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Mark",
											"id": 473
										}
									}
								},
								{
									"id": 306,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Mark",
												"id": 473
											}
										]
									}
								},
								{
									"id": 307,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 308,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/mark.ts",
													"line": 67,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/mark.ts",
							"line": 63,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						290,
						296,
						302
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/transforms/mark.ts",
					"line": 3,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 497,
			"name": "Node",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 502,
					"name": "ancestor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 503,
							"name": "ancestor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the node at a specific path, asserting that it's an ancestor node."
							},
							"parameters": [
								{
									"id": 504,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 505,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Ancestor",
								"id": 610
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 32,
							"character": 10
						}
					]
				},
				{
					"id": 506,
					"name": "ancestors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 507,
							"name": "ancestors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of all the ancestor nodes above a specific path.",
								"text": "By default the order is bottom-up, from lowest to highest ancestor in\nthe tree, but you can pass the `reverse: true` option to go top-down.\n"
							},
							"parameters": [
								{
									"id": 508,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 509,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 510,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 511,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 54,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "AncestorEntry",
										"id": 613
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 51,
							"character": 12
						}
					]
				},
				{
					"id": 512,
					"name": "child",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 513,
							"name": "child",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the child of a node at a specific index."
							},
							"parameters": [
								{
									"id": 514,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 515,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Descendant",
								"id": 609
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 69,
							"character": 7
						}
					]
				},
				{
					"id": 516,
					"name": "closest",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 517,
							"name": "closest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Find the closest matching node entry starting from a specific path."
							},
							"parameters": [
								{
									"id": 518,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 519,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 520,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 521,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 522,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 523,
															"name": "entry",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "NodeEntry",
																"id": 611
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 96,
													"character": 14
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 93,
							"character": 9
						}
					]
				},
				{
					"id": 524,
					"name": "common",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 525,
							"name": "common",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get an entry for the common ancesetor node of two paths."
							},
							"parameters": [
								{
									"id": 526,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 527,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 528,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeEntry",
								"id": 611
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 109,
							"character": 8
						}
					]
				},
				{
					"id": 529,
					"name": "descendant",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 530,
							"name": "descendant",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the node at a specific path, asserting that it's a descendant node."
							},
							"parameters": [
								{
									"id": 531,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 532,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Descendant",
								"id": 609
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 119,
							"character": 12
						}
					]
				},
				{
					"id": 533,
					"name": "descendants",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 534,
							"name": "descendants",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of all the descendant node entries inside a root node."
							},
							"parameters": [
								{
									"id": 535,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 536,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 537,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 137,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DescendantEntry",
										"id": 612
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 135,
							"character": 14
						}
					]
				},
				{
					"id": 538,
					"name": "elements",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 539,
							"name": "elements",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of all the element nodes inside a root node. Each iteration\nwill return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\nroot node is an element it will be included in the iteration as well."
							},
							"parameters": [
								{
									"id": 540,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 541,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 542,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 161,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ElementEntry",
										"id": 462
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 159,
							"character": 11
						}
					]
				},
				{
					"id": 543,
					"name": "first",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 544,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the first node entry in a root node from a path."
							},
							"parameters": [
								{
									"id": 545,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 546,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeEntry",
								"id": 611
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 179,
							"character": 7
						}
					]
				},
				{
					"id": 547,
					"name": "fragment",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 548,
							"name": "fragment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the sliced fragment represented by a range inside a root node."
							},
							"parameters": [
								{
									"id": 549,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 550,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Descendant",
									"id": 609
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 199,
							"character": 10
						}
					]
				},
				{
					"id": 551,
					"name": "furthest",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 552,
							"name": "furthest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Find the furthest matching node entry starting from a specific path."
							},
							"parameters": [
								{
									"id": 553,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 554,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 555,
									"name": "predicate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 556,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 557,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 558,
															"name": "entry",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "NodeEntry",
																"id": 611
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 246,
													"character": 14
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 243,
							"character": 10
						}
					]
				},
				{
					"id": 559,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 560,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the descendant node referred to by a specific path. If the path is an\nempty array, it refers to the root node itself."
							},
							"parameters": [
								{
									"id": 561,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 562,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 496
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 260,
							"character": 5
						}
					]
				},
				{
					"id": 563,
					"name": "has",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 564,
							"name": "has",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a descendant node exists at a specific path."
							},
							"parameters": [
								{
									"id": 565,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 566,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 284,
							"character": 5
						}
					]
				},
				{
					"id": 567,
					"name": "isNode",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 568,
							"name": "isNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Node` interface."
							},
							"parameters": [
								{
									"id": 569,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Node"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 304,
							"character": 8
						}
					]
				},
				{
					"id": 570,
					"name": "isNodeList",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 571,
							"name": "isNodeList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a list of `Node` objects."
							},
							"parameters": [
								{
									"id": 572,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "Node"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 314,
							"character": 12
						}
					]
				},
				{
					"id": 573,
					"name": "last",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 574,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the lash node entry in a root node from a path."
							},
							"parameters": [
								{
									"id": 575,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 576,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeEntry",
								"id": 611
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 322,
							"character": 6
						}
					]
				},
				{
					"id": 577,
					"name": "leaf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 578,
							"name": "leaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the node at a specific path, ensuring it's a leaf text node."
							},
							"parameters": [
								{
									"id": 579,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 580,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Text",
								"id": 833
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 343,
							"character": 6
						}
					]
				},
				{
					"id": 581,
					"name": "levels",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 582,
							"name": "levels",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of the in a branch of the tree, from a specific path.",
								"text": "By default the order is top-down, from lowest to highest node in the tree,\nbut you can pass the `reverse: true` option to go bottom-up.\n"
							},
							"parameters": [
								{
									"id": 583,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 584,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 585,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 586,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 365,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 362,
							"character": 9
						}
					]
				},
				{
					"id": 587,
					"name": "marks",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 588,
							"name": "marks",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of all the marks in all of the text nodes in a root node."
							},
							"parameters": [
								{
									"id": 589,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 590,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 591,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 381,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MarkEntry",
										"id": 491
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 379,
							"character": 8
						}
					]
				},
				{
					"id": 498,
					"name": "matches",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 499,
							"name": "matches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 500,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 501,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Node",
												"id": 496
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 21,
							"character": 9
						}
					]
				},
				{
					"id": 592,
					"name": "nodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 593,
							"name": "nodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of all the node entries of a root node. Each entry is\nreturned as a `[Node, Path]` tuple, with the path referring to the node's\nposition inside the root node."
							},
							"parameters": [
								{
									"id": 594,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 595,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 596,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 404,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 402,
							"character": 8
						}
					]
				},
				{
					"id": 597,
					"name": "parent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 598,
							"name": "parent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the parent of a node at a specific path."
							},
							"parameters": [
								{
									"id": 599,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 600,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Ancestor",
								"id": 610
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 480,
							"character": 8
						}
					]
				},
				{
					"id": 601,
					"name": "text",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 602,
							"name": "text",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the concatenated text string of a node's content.",
								"text": "Note that this will not include spaces or line breaks between block nodes.\nIt is not a user-facing string, but a string for performing offset-related\ncomputations for a node.\n"
							},
							"parameters": [
								{
									"id": 603,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 501,
							"character": 6
						}
					]
				},
				{
					"id": 604,
					"name": "texts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 605,
							"name": "texts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return an iterable of all leaf text nodes in a root node."
							},
							"parameters": [
								{
									"id": 606,
									"name": "root",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 496
									}
								},
								{
									"id": 607,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 608,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/node.ts",
													"line": 515,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TextEntry",
										"id": 849
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/node.ts",
							"line": 513,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						502,
						506,
						512,
						516,
						524,
						529,
						533,
						538,
						543,
						547,
						551,
						559,
						563,
						567,
						570,
						573,
						577,
						581,
						587,
						498,
						592,
						597,
						601,
						604
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/node.ts",
					"line": 20,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 358,
			"name": "NodeQueries",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 359,
					"name": "isMatch",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 360,
							"name": "isMatch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a node entry is a match."
							},
							"parameters": [
								{
									"id": 361,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 362,
									"name": "entry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NodeEntry",
										"id": 611
									}
								},
								{
									"id": 363,
									"name": "match",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "NodeMatch",
												"id": 614
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NodeMatch",
													"id": 614
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/node.ts",
							"line": 8,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						359
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/queries/node.ts",
					"line": 3,
					"character": 24
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 309,
			"name": "NodeTransforms",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 310,
					"name": "insertNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 311,
							"name": "insertNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert nodes at a specific location in the Editor."
							},
							"parameters": [
								{
									"id": 312,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 313,
									"name": "nodes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Node",
												"id": 496
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Node",
													"id": 496
												}
											}
										]
									}
								},
								{
									"id": 314,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 315,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 22,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 19,
							"character": 13
						}
					]
				},
				{
					"id": 316,
					"name": "liftNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 317,
							"name": "liftNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Lift nodes at a specific location upwards in the document tree, splitting\ntheir parent in two if necessary."
							},
							"parameters": [
								{
									"id": 318,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 319,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 320,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 125,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 123,
							"character": 11
						}
					]
				},
				{
					"id": 321,
					"name": "mergeNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 322,
							"name": "mergeNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merge a node at a location with the previous node of the same depth,\nremoving any empty containing nodes after the merge if necessary."
							},
							"parameters": [
								{
									"id": 323,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 324,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 325,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 185,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 183,
							"character": 12
						}
					]
				},
				{
					"id": 326,
					"name": "moveNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 327,
							"name": "moveNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Move the nodes at a location to a new location."
							},
							"parameters": [
								{
									"id": 328,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 329,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 330,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 331,
													"character": 12
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 329,
							"character": 11
						}
					]
				},
				{
					"id": 331,
					"name": "removeNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 332,
							"name": "removeNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove the nodes at a specific location in the document."
							},
							"parameters": [
								{
									"id": 333,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 334,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 335,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 377,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 375,
							"character": 13
						}
					]
				},
				{
					"id": 336,
					"name": "setNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 337,
							"name": "setNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set new properties on the nodes ..."
							},
							"parameters": [
								{
									"id": 338,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 339,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Node",
												"id": 496
											}
										]
									}
								},
								{
									"id": 340,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 341,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 422,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 419,
							"character": 10
						}
					]
				},
				{
					"id": 342,
					"name": "splitNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 343,
							"name": "splitNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Split the nodes at a specific location."
							},
							"parameters": [
								{
									"id": 344,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 345,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 346,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 487,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 485,
							"character": 12
						}
					]
				},
				{
					"id": 347,
					"name": "unwrapNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 348,
							"name": "unwrapNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unwrap the nodes at a location from a parent node, splitting the parent if\nnecessary to ensure that only the content in the range is unwrapped."
							},
							"parameters": [
								{
									"id": 349,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 350,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 351,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 611,
													"character": 12
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 609,
							"character": 13
						}
					]
				},
				{
					"id": 352,
					"name": "wrapNodes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 353,
							"name": "wrapNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Wrap the nodes at a location in a new container node, splitting the edges\nof the range first to ensure that only the content in the range is wrapped."
							},
							"parameters": [
								{
									"id": 354,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 355,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 447
									}
								},
								{
									"id": 356,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 357,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/node.ts",
													"line": 662,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/node.ts",
							"line": 659,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						310,
						316,
						321,
						326,
						331,
						336,
						342,
						347,
						352
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/transforms/node.ts",
					"line": 14,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 619,
			"name": "Path",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 620,
					"name": "ancestors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 621,
							"name": "ancestors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a list of ancestor paths for a given path.",
								"text": "The paths are sorted from deepest to shallowest ancestor. However, if the\n`reverse: true` option is passed, they are reversed.\n"
							},
							"parameters": [
								{
									"id": 622,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 623,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 624,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/path.ts",
													"line": 20,
													"character": 32
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Path",
									"id": 618
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 20,
							"character": 11
						}
					]
				},
				{
					"id": 625,
					"name": "common",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 626,
							"name": "common",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the common ancestor path of two paths."
							},
							"parameters": [
								{
									"id": 627,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 628,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 618
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 37,
							"character": 8
						}
					]
				},
				{
					"id": 629,
					"name": "compare",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 630,
							"name": "compare",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compare a path to another, returning an integer indicating whether the path\nwas before, at, or after the other.",
								"text": "Note: Two paths of unequal length can still receive a `0` result if one is\ndirectly above or below the other. If you want exact matching, use\n[[Path.equals]] instead.\n"
							},
							"parameters": [
								{
									"id": 631,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 632,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "unknown",
										"name": "-1"
									},
									{
										"type": "unknown",
										"name": "0"
									},
									{
										"type": "unknown",
										"name": "1"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 63,
							"character": 9
						}
					]
				},
				{
					"id": 633,
					"name": "endsAfter",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 634,
							"name": "endsAfter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path ends after one of the indexes in another."
							},
							"parameters": [
								{
									"id": 635,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 636,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 78,
							"character": 11
						}
					]
				},
				{
					"id": 637,
					"name": "endsAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 638,
							"name": "endsAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path ends at one of the indexes in another."
							},
							"parameters": [
								{
									"id": 639,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 640,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 91,
							"character": 8
						}
					]
				},
				{
					"id": 641,
					"name": "endsBefore",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 642,
							"name": "endsBefore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path ends before one of the indexes in another."
							},
							"parameters": [
								{
									"id": 643,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 644,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 102,
							"character": 12
						}
					]
				},
				{
					"id": 645,
					"name": "equals",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 646,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is exactly equal to another."
							},
							"parameters": [
								{
									"id": 647,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 648,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 115,
							"character": 8
						}
					]
				},
				{
					"id": 649,
					"name": "isAfter",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 650,
							"name": "isAfter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is after another."
							},
							"parameters": [
								{
									"id": 651,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 652,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 125,
							"character": 9
						}
					]
				},
				{
					"id": 653,
					"name": "isAncestor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 654,
							"name": "isAncestor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is an ancestor of another."
							},
							"parameters": [
								{
									"id": 655,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 656,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 133,
							"character": 12
						}
					]
				},
				{
					"id": 657,
					"name": "isBefore",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 658,
							"name": "isBefore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is before another."
							},
							"parameters": [
								{
									"id": 659,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 660,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 141,
							"character": 10
						}
					]
				},
				{
					"id": 661,
					"name": "isChild",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 662,
							"name": "isChild",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is a child of another."
							},
							"parameters": [
								{
									"id": 663,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 664,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 149,
							"character": 9
						}
					]
				},
				{
					"id": 665,
					"name": "isCommon",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 666,
							"name": "isCommon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is equal to or an ancestor of another."
							},
							"parameters": [
								{
									"id": 667,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 668,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 159,
							"character": 10
						}
					]
				},
				{
					"id": 669,
					"name": "isDescendant",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 670,
							"name": "isDescendant",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is a descendant of another."
							},
							"parameters": [
								{
									"id": 671,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 672,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 167,
							"character": 14
						}
					]
				},
				{
					"id": 673,
					"name": "isParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 674,
							"name": "isParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is the parent of another."
							},
							"parameters": [
								{
									"id": 675,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 676,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 175,
							"character": 10
						}
					]
				},
				{
					"id": 677,
					"name": "isPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 678,
							"name": "isPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check is a value implements the `Path` interface."
							},
							"parameters": [
								{
									"id": 679,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Path"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 185,
							"character": 8
						}
					]
				},
				{
					"id": 680,
					"name": "isSibling",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 681,
							"name": "isSibling",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a path is a sibling of another."
							},
							"parameters": [
								{
									"id": 682,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 683,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 196,
							"character": 11
						}
					]
				},
				{
					"id": 684,
					"name": "levels",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 685,
							"name": "levels",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a list of paths at every level down to a path. Note: this is the same\nas `Path.ancestors`, but including the path itself.",
								"text": "The paths are sorted from shallowest to deepest. However, if the `reverse:\ntrue` option is passed, they are reversed.\n"
							},
							"parameters": [
								{
									"id": 686,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 687,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 688,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/path.ts",
													"line": 218,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Path",
									"id": 618
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 216,
							"character": 8
						}
					]
				},
				{
					"id": 689,
					"name": "next",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 690,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given a path, get the path to the next sibling node."
							},
							"parameters": [
								{
									"id": 691,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 618
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 240,
							"character": 6
						}
					]
				},
				{
					"id": 692,
					"name": "parent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 693,
							"name": "parent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given a path, return a new path referring to the parent node above it."
							},
							"parameters": [
								{
									"id": 694,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 618
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 255,
							"character": 8
						}
					]
				},
				{
					"id": 695,
					"name": "previous",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 696,
							"name": "previous",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given a path, get the path to the previous sibling node."
							},
							"parameters": [
								{
									"id": 697,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 618
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 267,
							"character": 10
						}
					]
				},
				{
					"id": 698,
					"name": "relative",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 699,
							"name": "relative",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a path relative to an ancestor."
							},
							"parameters": [
								{
									"id": 700,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 701,
									"name": "ancestor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 618
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 289,
							"character": 10
						}
					]
				},
				{
					"id": 702,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 703,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform a path by an operation."
							},
							"parameters": [
								{
									"id": 704,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Path",
										"id": 618
									}
								},
								{
									"id": 705,
									"name": "operation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								},
								{
									"id": 706,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 707,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/path.ts",
													"line": 306,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Path",
										"id": 618
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path.ts",
							"line": 303,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						620,
						625,
						629,
						633,
						637,
						641,
						645,
						649,
						653,
						657,
						661,
						665,
						669,
						673,
						677,
						680,
						684,
						689,
						692,
						695,
						698,
						702
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/path.ts",
					"line": 12,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 713,
			"name": "PathRef",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 714,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 715,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform the path ref's current value by an operation."
							},
							"parameters": [
								{
									"id": 716,
									"name": "ref",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "PathRef",
										"id": 708
									}
								},
								{
									"id": 717,
									"name": "op",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/path-ref.ts",
							"line": 20,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						714
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/path-ref.ts",
					"line": 15,
					"character": 20
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 723,
			"name": "Point",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 724,
					"name": "compare",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 725,
							"name": "compare",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compare a point to another, returning an integer indicating whether the\npoint was before, at, or after the other."
							},
							"parameters": [
								{
									"id": 726,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 727,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "unknown",
										"name": "-1"
									},
									{
										"type": "unknown",
										"name": "0"
									},
									{
										"type": "unknown",
										"name": "1"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 24,
							"character": 9
						}
					]
				},
				{
					"id": 736,
					"name": "equals",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 737,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a point is exactly equal to another."
							},
							"parameters": [
								{
									"id": 738,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 739,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 56,
							"character": 8
						}
					]
				},
				{
					"id": 728,
					"name": "isAfter",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 729,
							"name": "isAfter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a point is after another."
							},
							"parameters": [
								{
									"id": 730,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 731,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 40,
							"character": 9
						}
					]
				},
				{
					"id": 732,
					"name": "isBefore",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 733,
							"name": "isBefore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a point is before another."
							},
							"parameters": [
								{
									"id": 734,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 735,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 48,
							"character": 10
						}
					]
				},
				{
					"id": 740,
					"name": "isPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 741,
							"name": "isPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Point` interface."
							},
							"parameters": [
								{
									"id": 742,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Point"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 67,
							"character": 9
						}
					]
				},
				{
					"id": 743,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 744,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform a point by an operation."
							},
							"parameters": [
								{
									"id": 745,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								},
								{
									"id": 746,
									"name": "op",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								},
								{
									"id": 747,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 748,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/point.ts",
													"line": 82,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point.ts",
							"line": 79,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						724,
						736,
						728,
						732,
						740,
						743
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/point.ts",
					"line": 18,
					"character": 18
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 755,
			"name": "PointRef",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 756,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 757,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform the point ref's current value by an operation."
							},
							"parameters": [
								{
									"id": 758,
									"name": "ref",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "PointRef",
										"id": 750
									}
								},
								{
									"id": 759,
									"name": "op",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/point-ref.ts",
							"line": 20,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						756
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/point-ref.ts",
					"line": 15,
					"character": 21
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 765,
			"name": "Range",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 766,
					"name": "edges",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 767,
							"name": "edges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start and end points of a range, in the order in which they appear\nin the document."
							},
							"parameters": [
								{
									"id": 768,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 769,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 770,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/range.ts",
													"line": 25,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									},
									{
										"type": "reference",
										"name": "Point",
										"id": 718
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 23,
							"character": 7
						}
					]
				},
				{
					"id": 771,
					"name": "end",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 772,
							"name": "end",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the end point of a range."
							},
							"parameters": [
								{
									"id": 773,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 40,
							"character": 5
						}
					]
				},
				{
					"id": 774,
					"name": "equals",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 775,
							"name": "equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range is exactly equal to another."
							},
							"parameters": [
								{
									"id": 776,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 777,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 49,
							"character": 8
						}
					]
				},
				{
					"id": 778,
					"name": "exists",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 779,
							"name": "exists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range exists in a list or map of ranges."
							},
							"parameters": [
								{
									"id": 780,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 781,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Range",
													"id": 760
												}
											},
											{
												"type": "reference",
												"name": "Record",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Range",
														"id": 760
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 60,
							"character": 8
						}
					]
				},
				{
					"id": 782,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 783,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range includes a path, a point or part of another range."
							},
							"parameters": [
								{
									"id": 784,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 785,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Path",
												"id": 618
											},
											{
												"type": "reference",
												"name": "Point",
												"id": 718
											},
											{
												"type": "reference",
												"name": "Range",
												"id": 760
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 80,
							"character": 10
						}
					]
				},
				{
					"id": 786,
					"name": "intersection",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 787,
							"name": "intersection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the intersection of a range with another."
							},
							"parameters": [
								{
									"id": 788,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 789,
									"name": "another",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Range",
										"id": 760
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 113,
							"character": 14
						}
					]
				},
				{
					"id": 790,
					"name": "isBackward",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 791,
							"name": "isBackward",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range is backward, meaning that its anchor point appears in the\ndocument _after_ its focus point."
							},
							"parameters": [
								{
									"id": 792,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 132,
							"character": 12
						}
					]
				},
				{
					"id": 793,
					"name": "isCollapsed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 794,
							"name": "isCollapsed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range is collapsed, meaning that both its anchor and focus\npoints refer to the exact same position in the document."
							},
							"parameters": [
								{
									"id": 795,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 142,
							"character": 13
						}
					]
				},
				{
					"id": 796,
					"name": "isExpanded",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 797,
							"name": "isExpanded",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range is expanded.",
								"text": "This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n"
							},
							"parameters": [
								{
									"id": 798,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 153,
							"character": 12
						}
					]
				},
				{
					"id": 799,
					"name": "isForward",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 800,
							"name": "isForward",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a range is forward.",
								"text": "This is the opposite of [[Range.isBackward]] and is provided for legibility.\n"
							},
							"parameters": [
								{
									"id": 801,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 163,
							"character": 11
						}
					]
				},
				{
					"id": 802,
					"name": "isRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 803,
							"name": "isRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the [[Range]] interface."
							},
							"parameters": [
								{
									"id": 804,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Range"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 171,
							"character": 9
						}
					]
				},
				{
					"id": 805,
					"name": "isRangeList",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 806,
							"name": "isRangeList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is an array of `Range` objects."
							},
							"parameters": [
								{
									"id": 807,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "Range"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 183,
							"character": 13
						}
					]
				},
				{
					"id": 808,
					"name": "isRangeMap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 809,
							"name": "isRangeMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a map of `Range` objects."
							},
							"parameters": [
								{
									"id": 810,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Record",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "Range"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 193,
							"character": 12
						}
					]
				},
				{
					"id": 811,
					"name": "points",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 812,
							"name": "points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Iterate through all of the point entries in a range."
							},
							"parameters": [
								{
									"id": 813,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Iterable",
								"typeArguments": [
									{
										"type": "reference",
										"name": "PointEntry",
										"id": 749
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 209,
							"character": 9
						}
					]
				},
				{
					"id": 814,
					"name": "start",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 815,
							"name": "start",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start point of a range."
							},
							"parameters": [
								{
									"id": 816,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point",
								"id": 718
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 218,
							"character": 7
						}
					]
				},
				{
					"id": 817,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 818,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform a range by an operation."
							},
							"parameters": [
								{
									"id": 819,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								},
								{
									"id": 820,
									"name": "op",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								},
								{
									"id": 821,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 822,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/range.ts",
													"line": 230,
													"character": 12
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Range",
										"id": 760
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range.ts",
							"line": 227,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						766,
						771,
						774,
						778,
						782,
						786,
						790,
						793,
						796,
						799,
						802,
						805,
						808,
						811,
						814,
						817
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/range.ts",
					"line": 17,
					"character": 18
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 364,
			"name": "RangeQueries",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 365,
					"name": "unhangRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 366,
							"name": "unhangRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert a range into a non-hanging one."
							},
							"parameters": [
								{
									"id": 367,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 368,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 760
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Range",
								"id": 760
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/queries/range.ts",
							"line": 8,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						365
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/queries/range.ts",
					"line": 3,
					"character": 25
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 828,
			"name": "RangeRef",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 829,
					"name": "transform",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 830,
							"name": "transform",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform the range ref's current value by an operation."
							},
							"parameters": [
								{
									"id": 831,
									"name": "ref",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RangeRef",
										"id": 823
									}
								},
								{
									"id": 832,
									"name": "op",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Operation"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/range-ref.ts",
							"line": 20,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						829
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/range-ref.ts",
					"line": 15,
					"character": 21
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 369,
			"name": "SelectionTransforms",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 370,
					"name": "collapse",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 371,
							"name": "collapse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Collapse the selection."
							},
							"parameters": [
								{
									"id": 372,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 373,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 374,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/selection.ts",
													"line": 10,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/selection.ts",
							"line": 8,
							"character": 10
						}
					]
				},
				{
					"id": 375,
					"name": "deselect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 376,
							"name": "deselect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unset the selection."
							},
							"parameters": [
								{
									"id": 377,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/selection.ts",
							"line": 36,
							"character": 10
						}
					]
				},
				{
					"id": 378,
					"name": "move",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 379,
							"name": "move",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Move the selection's point forward or backward."
							},
							"parameters": [
								{
									"id": 380,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 381,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 382,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/selection.ts",
													"line": 54,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/selection.ts",
							"line": 52,
							"character": 6
						}
					]
				},
				{
					"id": 383,
					"name": "select",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 384,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the selection to a new value."
							},
							"parameters": [
								{
									"id": 385,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 386,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Location",
										"id": 463
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/selection.ts",
							"line": 108,
							"character": 8
						}
					]
				},
				{
					"id": 387,
					"name": "setPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 388,
							"name": "setPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set new properties on one of the selection's points."
							},
							"parameters": [
								{
									"id": 389,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 390,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Point",
												"id": 718
											}
										]
									}
								},
								{
									"id": 391,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 392,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/selection.ts",
													"line": 139,
													"character": 12
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/selection.ts",
							"line": 136,
							"character": 10
						}
					]
				},
				{
					"id": 393,
					"name": "setSelection",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 394,
							"name": "setSelection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set new properties on the selection."
							},
							"parameters": [
								{
									"id": 395,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 396,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Range",
												"id": 760
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/selection.ts",
							"line": 173,
							"character": 14
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						370,
						375,
						378,
						383,
						387,
						393
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/transforms/selection.ts",
					"line": 3,
					"character": 32
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 469,
			"name": "Span",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 470,
					"name": "isSpan",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 471,
							"name": "isSpan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Span` interface."
							},
							"parameters": [
								{
									"id": 472,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Span"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/location.ts",
							"line": 36,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						470
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/location.ts",
					"line": 31,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 838,
			"name": "Text",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 839,
					"name": "isText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 840,
							"name": "isText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value implements the `Text` interface."
							},
							"parameters": [
								{
									"id": 841,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Text"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/text.ts",
							"line": 21,
							"character": 8
						}
					]
				},
				{
					"id": 842,
					"name": "isTextList",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 843,
							"name": "isTextList",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a value is a list of `Text` objects."
							},
							"parameters": [
								{
									"id": 844,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "Text"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/text.ts",
							"line": 33,
							"character": 12
						}
					]
				},
				{
					"id": 845,
					"name": "matches",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 846,
							"name": "matches",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if an text matches set of properties.",
								"text": "Note: this is for matching custom properties, and it does not ensure that\nthe `text` property are two nodes equal. However, if `marks` are passed it\nwill ensure that the set of marks is exactly equal.\n"
							},
							"parameters": [
								{
									"id": 847,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Text",
										"id": 833
									}
								},
								{
									"id": 848,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Partial",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Text",
												"id": 833
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/text.ts",
							"line": 45,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						839,
						842,
						845
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/text.ts",
					"line": 16,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 397,
			"name": "TextTransforms",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 398,
					"name": "delete",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 399,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete content in the editor."
							},
							"parameters": [
								{
									"id": 400,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 401,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 402,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/text.ts",
													"line": 19,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/text.ts",
							"line": 17,
							"character": 8
						}
					]
				},
				{
					"id": 403,
					"name": "insertFragment",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 404,
							"name": "insertFragment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a fragment at a specific location in the editor."
							},
							"parameters": [
								{
									"id": 405,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 406,
									"name": "fragment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Node",
											"id": 496
										}
									}
								},
								{
									"id": 407,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 408,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/text.ts",
													"line": 157,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/text.ts",
							"line": 154,
							"character": 16
						}
					]
				},
				{
					"id": 409,
					"name": "insertText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 410,
							"name": "insertText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Insert a string of text in the Editor."
							},
							"parameters": [
								{
									"id": 411,
									"name": "editor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Editor",
										"id": 415
									}
								},
								{
									"id": 412,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 413,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 414,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "interfaces/editor/transforms/text.ts",
													"line": 334,
													"character": 12
												}
											]
										}
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "interfaces/editor/transforms/text.ts",
							"line": 331,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						398,
						403,
						409
					]
				}
			],
			"sources": [
				{
					"fileName": "interfaces/editor/transforms/text.ts",
					"line": 12,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				5,
				1,
				8,
				11,
				14,
				415,
				447,
				16,
				18,
				21,
				24,
				473,
				708,
				718,
				750,
				760,
				823,
				27,
				833
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				610,
				613,
				64,
				609,
				612,
				462,
				463,
				491,
				492,
				496,
				611,
				614,
				618,
				749,
				468,
				849
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				82,
				93,
				94,
				95,
				96
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				850
			]
		},
		{
			"title": "Object literals",
			"kind": 2097152,
			"children": [
				30,
				446,
				451,
				65,
				97,
				83,
				464,
				137,
				476,
				289,
				497,
				358,
				309,
				619,
				713,
				723,
				755,
				765,
				364,
				828,
				369,
				469,
				838,
				397
			]
		}
	]
}